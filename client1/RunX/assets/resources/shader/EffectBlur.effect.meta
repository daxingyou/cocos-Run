{
  "ver": "1.0.27",
  "uuid": "6eabafd8-8de5-41bd-9e73-c3d28350d350",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float bightness;\nuniform float renderWidth;\nuniform float renderHeight;\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvec4 blurEx (vec2 uv) {\n  const int mSize = 7;\n  const int kSize = (mSize - 1) / 2;\n  float kernel[mSize];\n  kernel[0] = 0.051990;\n  kernel[1] = 0.054712;\n  kernel[2] = 0.056413;\n  kernel[3] = 0.056991;\n  kernel[4] = 0.056413;\n  kernel[5] = 0.054712;\n  kernel[6] = 0.051990;\n  float Z = 0.383222598524663;\n  vec4 final_colour = vec4(0.0);\n  for (int i = -kSize; i <= kSize; ++i) {\n    for (int j = -kSize; j <= kSize; ++j) {\n      vec2 suv = uv + vec2(float(i) / renderWidth, float(j) / renderHeight);\n      final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(texture, suv);\n    }\n  }\n  return vec4( (final_colour / (Z * Z)).rgb, 1.0 );\n}\nvoid main () {\n  gl_FragColor = vec4(dim(blurEx(v_uv0), bightness));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float bightness;\n  float renderWidth;\n  float renderHeight;\n};\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvec4 blurEx (vec2 uv) {\n  const int mSize = 7;\n  const int kSize = (mSize - 1) / 2;\n  float kernel[mSize];\n  kernel[0] = 0.051990;\n  kernel[1] = 0.054712;\n  kernel[2] = 0.056413;\n  kernel[3] = 0.056991;\n  kernel[4] = 0.056413;\n  kernel[5] = 0.054712;\n  kernel[6] = 0.051990;\n  float Z = 0.383222598524663;\n  vec4 final_colour = vec4(0.0);\n  for (int i = -kSize; i <= kSize; ++i) {\n    for (int j = -kSize; j <= kSize; ++j) {\n      vec2 suv = uv + vec2(float(i) / renderWidth, float(j) / renderHeight);\n      final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(texture, suv);\n    }\n  }\n  return vec4( (final_colour / (Z * Z)).rgb, 1.0 );\n}\nvoid main () {\n  gl_FragColor = vec4(dim(blurEx(v_uv0), bightness));\n}"
      }
    }
  ],
  "subMetas": {}
}