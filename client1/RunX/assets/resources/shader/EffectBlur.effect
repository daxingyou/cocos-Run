// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        bightness: {value: 0.5}
        renderWidth: {value: 1280.0}
        renderHeight: {value: 720.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    float bightness;
    float renderWidth;
    float renderHeight;
    // float blurAmount;
  };

  vec4 dim(vec4 col, float factor) {
    return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);
  }

  float normpdf (float x, float sigma) {
    return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
  }


  vec4 blurEx (vec2 uv) {
    const int mSize = 7;
    const int kSize = (mSize - 1) / 2;
    float kernel[mSize];
    // kernel[0] = 0.044159; 
    // kernel[0] = 0.048406; 
    kernel[0] = 0.051990; 
    kernel[1] = 0.054712; 
    kernel[2] = 0.056413; 
    kernel[3] = 0.056991;
    kernel[4] = 0.056413; 
    kernel[5] = 0.054712; 
    kernel[6] = 0.051990; 
    // kernel[0] = 0.048406; 
    // kernel[0] = 0.044159;

    // float Z = 0.5683539250219334;
    float Z = 0.383222598524663;
    
    vec4 final_colour = vec4(0.0);
    
    // float sigma = 7.0;
    // float Z = 0.0;
    // for (int j = 0; j <= kSize; ++j) {
    //   kernel[kSize + j] = kernel[kSize - j] = normpdf(float(j), sigma);
    // }

    // for (int j = 0; j < mSize; ++j) {
    //   Z += kernel[j];
    // }

    for (int i = -kSize; i <= kSize; ++i) {
      for (int j = -kSize; j <= kSize; ++j) {
        vec2 suv = uv + vec2(float(i) / renderWidth, float(j) / renderHeight);
        final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(texture, suv);
      }
    }

    return vec4( (final_colour / (Z * Z)).rgb, 1.0 );
  }

  void main () {
    gl_FragColor = vec4(dim(blurEx(v_uv0), bightness));
  }
}%

