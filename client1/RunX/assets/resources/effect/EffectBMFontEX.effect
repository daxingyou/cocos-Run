CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        bold: { value: 0.0 }
        outline: { value: 0.0 }
        outlineColor: { value: [0, 0, 0, 1], editor: { type: color } }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>

  in vec4 v_color;

  uniform FontStyle {
    float bold;
    float outline;
  };

  uniform OutlineColor {
    vec4 outlineColor;
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    float r = 1.0, a = 1.0;

    #if USE_TEXTURE
    vec4 tex = texture2D(texture, v_uv0);
    r = tex.r;
    #if CC_USE_ALPHA_ATLAS_TEXTURE
    a = texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #else
    a = tex.a;
    #endif
    #endif

    if (bold > 0.0) {
      r = (r>=(1.0-bold)) ? 1.0 : r/(1.0-bold);
    }

    vec4 color = v_color;

    if (outline <= 0.0) {
      color.a *= r;
    } else {
      if (bold > 0.0) {
        a = (a>=(1.0-bold)) ? 1.0 : a/(1.0-bold);
      }

      color.rgb = v_color.rgb * r + outlineColor.rgb * (1.0 - r);
      color.a *= 1.0-(1.0-r)*(1.0-a*outlineColor.a);
    }

    ALPHA_TEST(color);

    gl_FragColor = color;
  }
}%
