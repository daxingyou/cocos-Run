{
  "ver": "1.0.27",
  "uuid": "fcd061b2-733c-4be1-85cc-3be4a71bed2f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform float bold;\nuniform float outline;\nuniform vec4 outlineColor;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float r = 1.0, a = 1.0;\n  #if USE_TEXTURE\n  vec4 tex = texture2D(texture, v_uv0);\n  r = tex.r;\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  a = texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #else\n  a = tex.a;\n  #endif\n  #endif\n  if (bold > 0.0) {\n    r = (r>=(1.0-bold)) ? 1.0 : r/(1.0-bold);\n  }\n  vec4 color = v_color;\n  if (outline <= 0.0) {\n    color.a *= r;\n  } else {\n    if (bold > 0.0) {\n      a = (a>=(1.0-bold)) ? 1.0 : a/(1.0-bold);\n    }\n    color.rgb = v_color.rgb * r + outlineColor.rgb * (1.0 - r);\n    color.a *= 1.0-(1.0-r)*(1.0-a*outlineColor.a);\n  }\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform FontStyle {\n  float bold;\n  float outline;\n};\nuniform OutlineColor {\n  vec4 outlineColor;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  float r = 1.0, a = 1.0;\n  #if USE_TEXTURE\n  vec4 tex = texture2D(texture, v_uv0);\n  r = tex.r;\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  a = texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #else\n  a = tex.a;\n  #endif\n  #endif\n  if (bold > 0.0) {\n    r = (r>=(1.0-bold)) ? 1.0 : r/(1.0-bold);\n  }\n  vec4 color = v_color;\n  if (outline <= 0.0) {\n    color.a *= r;\n  } else {\n    if (bold > 0.0) {\n      a = (a>=(1.0-bold)) ? 1.0 : a/(1.0-bold);\n    }\n    color.rgb = v_color.rgb * r + outlineColor.rgb * (1.0 - r);\n    color.a *= 1.0-(1.0-r)*(1.0-a*outlineColor.a);\n  }\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}